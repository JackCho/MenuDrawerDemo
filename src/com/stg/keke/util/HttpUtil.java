package com.stg.keke.util;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.URLEncoder;import java.security.KeyStore;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.HttpVersion;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.scheme.PlainSocketFactory;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;import org.apache.http.message.BasicNameValuePair;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.apache.http.params.HttpProtocolParams;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.util.Log;import com.lidroid.xutils.http.client.multipart.MultipartEntity;import com.lidroid.xutils.http.client.multipart.content.FileBody;import com.lidroid.xutils.http.client.multipart.content.StringBody;public class HttpUtil {//	private final static String URL = "http://www.ydtsystem.com/index.php/Api/index";	private static final int REQUEST_TIMEOUT = 20 * 1000;// 设置请求超时10秒钟	private static final int SO_TIMEOUT = 25 * 1000; // 设置等待数据超时时间10秒钟		public static boolean isGprs(Context context) {		 ConnectivityManager connectMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);		 NetworkInfo info = connectMgr.getActiveNetworkInfo();		 return info !=null && info.getType() ==  ConnectivityManager.TYPE_MOBILE;	}	public static boolean isNetworkAvailable(Context context) {		ConnectivityManager connManager = (ConnectivityManager) context				.getSystemService(Context.CONNECTIVITY_SERVICE);		if (connManager.getActiveNetworkInfo() != null) {			return connManager.getActiveNetworkInfo().isAvailable();		}		return false;	}		public static boolean isNetConnected() {		HttpParams httpParams = new BasicHttpParams();		HttpConnectionParams.setConnectionTimeout(httpParams, 3000);		HttpConnectionParams.setSoTimeout(httpParams, 3000);		HttpClient client = new DefaultHttpClient(httpParams);		HttpGet getMethod = new HttpGet("http://www.baidu.com");		try {			HttpResponse response = client.execute(getMethod);			int res = response.getStatusLine().getStatusCode();			if (res == 200) {				return true;			}		} catch (ClientProtocolException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		return false;	}	public static String getRequest(String url, Map<String, String> params) {		int res = 0;		if (!isNetConnected()) {			return null;		}		try {			StringBuilder urlBuilder = new StringBuilder();			urlBuilder.append(url);			if (null != params) {				urlBuilder.append("?");				Iterator<Entry<String, String>> iterator = params.entrySet()						.iterator();				while (iterator.hasNext()) {					Entry<String, String> param = iterator.next();					urlBuilder					.append(URLEncoder.encode(param.getKey(), "UTF-8"))					.append('=')					.append(URLEncoder.encode(param.getValue(), "UTF-8"));					if (iterator.hasNext()) {						urlBuilder.append('&');					}				}			}			HttpParams httpParams = new BasicHttpParams();			HttpConnectionParams.setConnectionTimeout(httpParams,					REQUEST_TIMEOUT);			HttpConnectionParams.setSoTimeout(httpParams, SO_TIMEOUT);			HttpClient client = new DefaultHttpClient(httpParams);			HttpGet getMethod = new HttpGet(urlBuilder.toString());			HttpResponse response = client.execute(getMethod);			res = response.getStatusLine().getStatusCode();			if (res == 200) {				StringBuilder builder = new StringBuilder();				BufferedReader reader = new BufferedReader(						new InputStreamReader(response.getEntity().getContent()));				for (String s = reader.readLine(); s != null; s = reader						.readLine()) {					builder.append(s);				}				String result = builder.toString();				Log.e("test","result--->" + result);				return result;			}		} catch (Exception e) {			e.printStackTrace();			Log.e("test", e.getMessage() + "");			return null;		}		return null;	}		public static String postRequest(String url, List<BasicNameValuePair> params) {		try {			HttpClient client = getNewHttpClient();			HttpPost postMethod = new HttpPost(url);			if (params != null && params.size() > 0) {				postMethod.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));			}			HttpResponse response = client.execute(postMethod);			int statueCode = response.getStatusLine().getStatusCode();			if (statueCode == 200) {				return EntityUtils.toString(response.getEntity());			}		} catch (Exception e) {		}		return null;	}		public static String doPost(String url, Map<String, String> param, File file ,String pic)			throws Exception {		HttpPost post = new HttpPost(url);		HttpParams httpParams = new BasicHttpParams();		HttpConnectionParams.setConnectionTimeout(httpParams, REQUEST_TIMEOUT);		HttpConnectionParams.setSoTimeout(httpParams, SO_TIMEOUT);		HttpClient client = new DefaultHttpClient(httpParams);		MultipartEntity entity = new MultipartEntity();		if (param != null && !param.isEmpty()) {			for (Map.Entry<String, String> entry : param.entrySet()) {				entity.addPart(entry.getKey(), new StringBody(entry.getValue()));			}		}		if (file != null && file.exists()) {			String type = file.getAbsolutePath().substring(file.getAbsolutePath().lastIndexOf(".") + 1);			entity.addPart(pic, new FileBody(file, "image/" + type));		}		post.setEntity(entity);		HttpResponse response = client.execute(post);		int stateCode = response.getStatusLine().getStatusCode();		StringBuffer sb = new StringBuffer();		if (stateCode == HttpStatus.SC_OK) {			HttpEntity result = response.getEntity();			if (result != null) {				InputStream is = result.getContent();				BufferedReader br = new BufferedReader(						new InputStreamReader(is));				String tempLine;				while ((tempLine = br.readLine()) != null) {					sb.append(tempLine);				}			}		}		post.abort();		Log.e("test", "result---->" + sb.toString());		return sb.toString();	}	private static HttpClient getNewHttpClient() {		try {			KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());			trustStore.load(null, null);			SSLSocketFactory sf = new SSLSocketFactory(trustStore);			sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);			HttpParams params = new BasicHttpParams();			HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);			HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);			HttpConnectionParams.setConnectionTimeout(params, REQUEST_TIMEOUT);			HttpConnectionParams.setSoTimeout(params, SO_TIMEOUT);			SchemeRegistry registry = new SchemeRegistry();			registry.register(new Scheme("http", PlainSocketFactory					.getSocketFactory(), 80));			registry.register(new Scheme("https", sf, 443));			ClientConnectionManager ccm = new ThreadSafeClientConnManager(					params, registry);			return new DefaultHttpClient(ccm, params);		} catch (Exception e) {			return new DefaultHttpClient();		}	}}