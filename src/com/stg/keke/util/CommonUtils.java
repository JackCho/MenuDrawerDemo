package com.stg.keke.util;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.regex.Matcher;import java.util.regex.Pattern;import com.stg.keke.R;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Environment;import android.util.Log;import android.view.View;import android.view.inputmethod.InputMethodManager;@SuppressLint("SimpleDateFormat")public class CommonUtils {		public static String getVersionName(Context context) throws Exception {		PackageManager packageManager = context.getPackageManager();		PackageInfo packInfo = packageManager.getPackageInfo(context.getPackageName(), 0);		String version = packInfo.versionName;		return version;	}	@SuppressLint("SimpleDateFormat")	public static String getCTime(String pattern) {		SimpleDateFormat simpleDate = new SimpleDateFormat(pattern);		Calendar calendar = Calendar.getInstance();		String currentTime = simpleDate.format(calendar.getTime());		return currentTime;	}	public static String formatTime(String time, String pattern) {		SimpleDateFormat format = new SimpleDateFormat(pattern);		try {			Date date = format.parse(time);			return format.format(date);		} catch (ParseException e) {			e.printStackTrace();		}		return "";	}	public static String convertStreamToString(InputStream is) {		BufferedReader reader = null;		try {			reader = new BufferedReader(new InputStreamReader(is, "UTF-8"), 8);		} catch (UnsupportedEncodingException e1) {			e1.printStackTrace();		}		StringBuilder sb = new StringBuilder();		String line = null;		try {			while ((line = reader.readLine()) != null) {				sb.append(line + "\n");			}		} catch (IOException e) {			Log.e("DataProvier convertStreamToString", e.getLocalizedMessage(),					e);		} finally {			try {				is.close();			} catch (IOException e) {				e.printStackTrace();			}		}		return sb.toString();	}	@SuppressLint("SimpleDateFormat")	public static File createPath(String fileName) throws IOException {		String imageFileName = "businessCard_" + fileName;		File imageFile = new File(getAlbumDir(), imageFileName);		return imageFile;	}	public static File getAlbumDir() {		File dir = new File(Environment.getExternalStorageDirectory(),				"businessCard/loading");		if (!dir.exists()) {			dir.mkdirs();		}		return dir;	}	public static boolean isEmailValid(String email) {		boolean tag = true;		final String pattern1 = "^([a-z0-9A-Z_]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";		final Pattern pattern = Pattern.compile(pattern1);		final Matcher mat = pattern.matcher(email);		if (!mat.find()) {			tag = false;		}		return tag;	}	public static boolean isUrlValid(String url) {		Pattern p = Pattern				.compile(						"^(http|www|ftp|)?(://)?(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*((:\\d+)?)(/(\\w+(-\\w+)*))*(\\.?(\\w)*)(\\?)?(((\\w*%)*(\\w*\\?)*(\\w*:)*(\\w*\\+)*(\\w*\\.)*(\\w*&)*(\\w*-)*(\\w*=)*(\\w*%)*(\\w*\\?)*(\\w*:)*(\\w*\\+)*(\\w*\\.)*(\\w*&)*(\\w*-)*(\\w*=)*)*(\\w*)*)$",						Pattern.CASE_INSENSITIVE);		Matcher matcher = p.matcher(url);		if (!matcher.find()) {			return false;		}		return true;	}	public static boolean isPhoneValid(String mobiles) {		Pattern p = Pattern.compile("^((13[0-9])|(15[0-9])|(18[0-9]))\\d{8}$");		Matcher m = p.matcher(mobiles);		return m.matches();	}		public static void closeBoard(Context mcontext) {		InputMethodManager imm = (InputMethodManager) mcontext				.getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm.isActive()) 			imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT,					InputMethodManager.HIDE_NOT_ALWAYS);	}	public static void hideSystemKeyBoard(Context mcontext, View v) {		InputMethodManager imm = (InputMethodManager) mcontext.getSystemService(Context.INPUT_METHOD_SERVICE);		imm.hideSoftInputFromWindow(v.getWindowToken(), 0);	}		public static void showSystemKeyBoard(View v) {		InputMethodManager imm = (InputMethodManager) v.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);		imm.showSoftInput(v, 0);	}	public static void toCall(Activity context, String phoneNum) {		context.startActivity(new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + phoneNum)));		context.overridePendingTransition(R.anim.in_from_right, 0);	}	public static void sendEmail(Context context, String addr) {		Intent emailIntent = new Intent(Intent.ACTION_SEND);		String[] receivers = new String[] { addr };		emailIntent.putExtra(Intent.EXTRA_EMAIL, receivers);		emailIntent.setType("plain/text");		context.startActivity(Intent.createChooser(emailIntent,"Choose Email Client"));	}	public static void showMapByWeb(Context context, double lat, double lng,			String title, String addrDesc) {		String url = "http://api.map.baidu.com/marker?location=" + lat + ","				+ lng + "&title=" + title + "&content=" + addrDesc				+ "&output=html";		showWebPage(context, url);	}	public static void showWebPage(Context context, String url) {		Intent intent = new Intent();		intent.setAction("android.intent.action.VIEW");		Uri uri = Uri.parse(url);		intent.setData(uri);		context.startActivity(intent);	}}